#! /usr/bin/env perl

# srt-owl
#
# Extract rare words from articles or subtitle files to
# learn foreign vocabulary.
#
# Author: Larion Garaczi
# Date: 2014

# TODO
#
# decent preprocessing (.srt, .sub, .html, .pdf?, ...)
# other languages
# add usage info (-h)
#

use 5.018;
use warnings;
use Getopt::Long;
use Term::ANSIColor qw / :constants /;

use lib "lib";
use GetDBHandle "db_handle"; #TODO delete or use this

### GLOBALS ###
use constant DB_NAME          => "srt-owl.db";
use constant SAVED_WORDS_PATH => "words.out";
###############

# Parse command line parameters.
# TODO make subroutine
my %options = (
	"lang" => "nl",  # LANGUAGE: default language is Dutch
	"low" => 5, # LOWEST: default is to not show words that are among the first 5000 most frequent words..
	"high" => 50, # HIGHEST default is to show only words that are in the first 50000 most frequent words
	"type" => "txt", # TYPE: assume text input TODO add .srt and .html functionality
	"interactive" => 1
);

GetOptions(
	"lang=s" => \$options{"lang"},
	"low=i" => \$options{"low"},
	"high=i" => \$options{"high"},
	"type=s" => \$options{"type"},
	"interactive!" => \$options{"interactive"},
);

die "ERROR: --high value must be higher than --low value.\n"
  if $options{"high"} <= $options{"low"};

# Collect all words from every input file

for(@ARGV){
	my $wordlist = {};
	my $inp_file;
	unless(open $inp_file, '<', "$_"){
		warn "Can't open input file: $!";
		next;
	}
	say "==$_=="; # print name of current input file

	collect_words($inp_file, $wordlist);
	my %results = filter_words($wordlist);

	if($options{interactive}){
		interactive(%results);
	}
	else{
		printwordlist(%results);
	}
}

sub filter_words {
	my $words_href = shift;
	my %out_wordlist;

	# connect to database (TODO modularize)

	my $dbh = DBI->connect(
		sprintf("dbi:SQLite:%s", DB_NAME),
		"", # no username
		"", # no password
		{PrintError => 0, RaiseError => 1, AutoCommit => 0, ReadOnly => 1}
	) or die "Can't connect to database (maybe you have to run build-db.pl first?): $DBI::errstr\n";
    # TODO: in case there is no DB built yet, it fails later, catch it!
	$dbh->do("PRAGMA synchronous = OFF; PRAGMA journal_mode = WAL;"); # speed-up!

	# collect words which
	# 1) we encountered in the input file
	# 1) is in the frequency interval provided by the user
	my $select_words_query =<<"SQL";
SELECT word FROM words WHERE word == ? AND id >= ? AND id <= ?;
SQL
	my $sth = $dbh->prepare($select_words_query);
	my($low, $high) = ($options{"low"}*1000, $options{"high"}*1000);
	for my $word (keys %$words_href){
		$sth->execute($word, $low, $high); #TODO do sth about the constant
		# copy word data to the filtered list if there is a match.
		$out_wordlist{$word} = $words_href->{$word} if($sth->fetch);
	}
	$dbh -> disconnect;
	return %out_wordlist;
}

sub collect_words {
	my($inp_file, $words_hr) = @_;
	# TODO more clever tokenization of sentences?
	my $SENTENCE_SEP = "([\.\?!])"; # sentence ending characters
	for(<$inp_file>){
		chomp;
		# split sentences, than reinsert the punctuation
		my @sentences = split /$SENTENCE_SEP/;
		for(0..$#sentences){
			next if $sentences[$_] =~ /$SENTENCE_SEP/;
			$sentences[$_] .= $sentences[$_+1] // "";
		}
		for(@sentences){
			my @words = split /\b/;
			my $sentence = $_;
			my $begin_sentence = 1;
			for(@words){
				next if /^[A-Z]/ and not $begin_sentence;
				$begin_sentence = 0;
				s/([A-Z])/\L$1/g; # case-insensitivity. TODO add switch?
				next if not /^[a-z]+$/; # filter out numbers and the like TODO unicode!
				# OK, found a word. Add the new context and increase occurence tally
                $words_hr->{$_}{contexts} //= []; #TODO delete
				push $words_hr->{$_}{contexts}, $sentence;
				$words_hr->{$_}{occurences}++;
			  }
		}
	}
}

sub get_contexts_string {
    my $wordlist        = shift;
    my $word            = shift;
    my $contexts_string = "";
    for my $context (@{$wordlist->{$word}{contexts}}) {
        $context =~ /(?<pre>(\b\S+\b\W*){0,20}) # max 20 words before
        (?<target>$word)
        (?<post>(\W*(\W*?\b\S+\b){0,20}\.?))/xi; # and 20 words after
        $contexts_string = $contexts_string . "$+{pre}" . BOLD . "$+{target}" . RESET . "$+{post}\n";
        #$contexts_string = $contexts_string . "$+{pre}" . "$+{target}" . "$+{post}\n";
    }
    return $contexts_string;
}

sub printwordlist {
	my %wordlist = @_;
	for(sort keys %wordlist){
		say BOLD, $_, RESET; #TODO boldprint subroutine + add switch
		say get_contexts_string(%wordlist, $_);
		# print context TODO make optional
		#print "..." if $+{post}[-1]
	}
}

sub interactive { #TODO break this up!
	my %wordlist = @_;
	my @tosave;
	my $finished;
	for(sort keys %wordlist) {
		last if($finished);
		my $word = $_;
		while(1){
			print BOLD, $word, RESET, " (C)ontext/(D)ictionary/(S)ave/(Q)uit/(N)ext: ";
			chomp ($_ = <STDIN>);
			if(/^C/i){ # Display context
				say get_contexts_string(\%wordlist, $word);
				next;
			}
			elsif(/^D/i){ # Look up word in dictionary
				my $target;
				$target = $word if(/^D$/i); # wihout arguments look up the word
				# look up the argument if any (useful for inflection etc.)
				$target = $1 if(/^D\s+([a-z]+)/i);
				say $target;
				system "woorden $target"; #TODO fix security leak
				next;
			}
			elsif(/^S/i){ # Save word to file
				my $target;
				$target = $word if(/^D$/i); # wihout arguments save the word
				# save the argument if there is any (useful for inflection etc.)
				$target = $1 if(/^D\s+([a-z]+)/i);
				push @tosave, $word;

			}
			elsif(/^Q/i){ # Quit (break out from loop and save words)
				$finished = 1; # set flag to break out from the for loop
				last;
			}
			elsif(/^N/i or /^$/){ # Go to next word
				last; #TODO add to ignore list
			}
			else{
				say "Please choose one!";
				redo;
			}
		}
	}
    save_words(\@tosave);
}

sub save_words {
    my $tosave = shift;
	if(@$tosave){
		my $out_name = SAVED_WORDS_PATH;
		if(-e $out_name){
			print "Warning: output file $out_name exists, overwrite? (y/n) ";
			while(my $user_input = <STDIN>){
				if($user_input =~ /^y/i){
					last;
				}
				elsif($user_input =~ /^n/i){
					return;
				}
				else{
					next;
				}
			}
		}
		open my $out_fh, ">", "$out_name"
		  or die "Can't open output file, reason: $!";
		say $out_fh $_ for(@$tosave);
	}
}
